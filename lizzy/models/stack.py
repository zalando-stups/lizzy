from typing import Optional  # NOQA
from datetime import datetime
from dateutil import parser as date_parser
import rod.model
from lizzy.exceptions import ObjectNotFound

from .senza_definition import SenzaDefinition
from ..util import now


class Stack(rod.model.Model):
    prefix = 'lizzy_stack'
    key = 'stack_id'
    search_properties = ['stack_id']

    def __init__(self, *,
                 stack_id: str=None,
                 creation_time: datetime=None,
                 keep_stacks: int,
                 traffic: int,
                 image_version: str,
                 senza_yaml: str,
                 stack_name: str,
                 ami_image: Optional[str]=None,
                 stack_version: Optional[str]=None,
                 parameters: Optional[list]=None,
                 status: Optional[str]='LIZZY:NEW',
                 application_version: Optional[str]=None,
                 **kwargs):
        """
        Stack Model stored in Redis

        :param stack_id: Id of the stack used both in Lizzy and Cloud Formation (Generated by Lizzy)
        :param creation_time: Date and time of stack creation
        :param keep_stacks: How many old stacks to keep
        :param traffic: How much traffic to route to new stack
        :param image_version: Docker image version to deploy
        :param ami_image: Which AMI image to use
        :param senza_yaml: Senza definition
        :param stack_name: Name of the application
        :param stack_version: Stack Version (generated by Lizzy)
        :param parameters: Parameters to pass to Senza
        :param status: Stack Status
        :param application_version: Application version to be used in CF and Kio
        :param kwargs: Other parameters that are not recognized
        """
        self.stack_name = stack_name
        self.creation_time = self._parse_date(creation_time or now())  # type: datetime
        self.image_version = image_version
        self.stack_version = (stack_version or
                              application_version or
                              self.generate_version(self.creation_time,
                                                    image_version))
        self.stack_id = stack_id if stack_id is not None else self.generate_id()  # type str
        self.ami_image = ami_image
        self.keep_stacks = keep_stacks
        self.traffic = traffic
        self.senza_yaml = senza_yaml
        self.parameters = parameters or []  # type: list
        self.status = status  # status is cloud formation status or LIZZY_NEW
        self.application_version = application_version

    @staticmethod
    def generate_version(creation_time: datetime, version: str) -> str:
        """
        Generates a version for the stack based on the image version and timestamp.
        It replaces `.`s with `o`s and removes `_`s to return a valid Cloud Formation Identification

        :param creation_time:  Date and time of stack creation
        :param version: Docker image version to deploy
        :return: CF stack version
        """
        version = version.lower().replace('-snapshot', 's').replace('.', 'o').replace('_', '')
        return '{version}T{time:%Y%m%d%H%M%S}'.format(version=version,
                                                      time=creation_time)

    def generate_id(self) -> str:
        """
        The id will be the same as the stack name on aws
        """
        return '{name}-{version}'.format(name=self.stack_name, version=self.stack_version)

    def generate_definition(self) -> SenzaDefinition:
        parameters = [self.image_version]
        parameters.extend(self.parameters)
        return SenzaDefinition(self.senza_yaml, self.stack_version, parameters)

    def _parse_date(self, date_time):
        if isinstance(date_time, datetime):
            return date_time
        return date_parser.parse(date_time)

    @classmethod
    def get(cls, *args, **kwargs) -> "Stack":
        try:
            return super().get(*args, **kwargs)
        except KeyError:
            raise ObjectNotFound(args[0])
